jupyterhub:
  prePuller:
    hook:
      enabled: false

  # For the proxy, we only need a ClusterIP service as Zenith will punch it out
  proxy:
    service:
      type: ClusterIP
    chp:
      networkPolicy:
        enabled: false

  hub:
    networkPolicy:
      enabled: false
  # Configure the authentication to respect the X-Remote-User header sent by Zenith from Azimuth
    extraConfig:
      remoteuser.py: |
        from jupyterhub.auth import Authenticator
        from jupyterhub.handlers import BaseHandler

        from tornado import web

        class RemoteUserLoginHandler(BaseHandler):
            def get(self):
                remote_user = self.request.headers.get("X-Remote-User")
                if not remote_user:
                    raise web.HTTPError(401)
                user = self.user_from_username(remote_user)
                self.set_login_cookie(user)
                next_url = self.get_next_url(user)
                self.redirect(next_url)

        class RemoteUserAuthenticator(Authenticator):
            def get_handlers(self, app):
                return [(r'/login', RemoteUserLoginHandler)]

            async def authenticate(self, *args, **kwargs):
                raise NotImplementedError()

        c.JupyterHub.authenticator_class = RemoteUserAuthenticator

  singleuser:
    networkPolicy:
      enabled: false
    defaultUrl: /lab
    extraEnv:
      JUPYTERHUB_SINGLEUSER_APP: "jupyter_server.serverapp.ServerApp"
    profileList:
      - display_name: "Python environment (minimal)"
        description: "Minimal Python environment"
        default: true
        kubespawner_override:
          image: jupyter/minimal-notebook:2022-02-12
      - display_name: "Spark environment"
        description: "Python, R, and Scala support for Apache Spark."
        kubespawner_override:
          image: jupyter/all-spark-notebook:2022-02-12
      - display_name: "GPU enabled Python, Julia and R environment"
        description: "Leverage Jupyter Notebooks with the power of your NVIDIA GPU via CUDA in Tensorflow and Pytorch."
        kubespawner_override:
          image: cschranz/gpu-jupyter:v1.4_cuda-11.2_ubuntu-20.04
      - display_name: "STFC SciML Benchmark"
        description: "CUDA-enabled Jupyter Notebook populated with an example benchmark notebook"
        kubespawner_override:
          image: cschranz/gpu-jupyter:v1.4_cuda-11.2_ubuntu-20.04
          lifecycle_hooks:
            postStart:
              exec:
                command:
                  - 'bash'
                  - '-c'
                  - >
                    pip install nbgitpuller && gitpuller https://github.com/stackhpc/IRIS-sciml-bench main IRIS-sciml-bench

    memory:
      limit: "1G"
      guarantee: "1G"
    cpu:
      limit: .5
      guarantee: .5
    storage:
      capacity: "10Gi"
      extraVolumes:
        - name: lustre-nfs
          nfs:
            server: 192.168.3.4
            path: /mnt/lustre
      extraVolumeMounts:
        - name: lustre-nfs
          mountPath: /lustre
