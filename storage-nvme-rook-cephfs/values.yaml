# Default values for nvme-rook-cephfs.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

provisioner:
  common:
    blockDeviceNames:
      - /dev/vdb
    mountDevVolume: true
    additionalHostPathVolumes:
      provisioner-mnt: /mnt
      provisioner-fstab: /etc/fstab
  classes:
  # Defines name of storage class.
  - name: local-nvme
    # Path on the host where local volumes of this storage class are mounted
    # under.
    hostDir: /mnt/disks
    # Optionally specify mount path of local volumes. By default, we use same
    # path as hostDir in container.
    mountDir: /mnt/disks
    # The volume mode of created PersistentVolume object. Default to Filesystem
    # if not specified.
    volumeMode: Block
    # File name pattern to discover. By default, discover all file names.
    namePattern: "*-dev-vd*"
    # Use dd to zero out block dev in two iterations
    blockCleanerCommand:
      - "/scripts/quick_reset.sh"
    # Uncomment to create storage class object and configure it.
    storageClass:
      # Available reclaim policies: Delete/Retain, defaults: Delete.
      reclaimPolicy: Delete
      # set as default class
      isDefaultClass: false

  daemonset:
    initContainers:
      - name: wait-for-prepare-disk
        image: debian
        imagePullPolicy: Always
        command: ['/bin/sh', '-c', 'bash -c "${CHECK_SCRIPT}"']
        env:
          - name: CHECK_SCRIPT
            value: |
              #!/usr/bin/env bash
              set -euo pipefail
              set -x
              while [[ $(awk '$2 == "/mnt" {print $1}' /proc/mounts | wc -l) -gt 0 ]]; do
                sleep 5
              done
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          # OpenStack flavor types are available to us, so use them for scheduling
          - matchExpressions:
            - key: node.kubernetes.io/instance-type
              operator: In
              values:
                - vm.iris.cpu.dac.quarter
                - vm.iris.cpu.dac.half
                - vm.iris.cpu.dac.full

rook-ceph-cluster:
  operatorNamespace: "rook-ceph"
  cephClusterSpec:
    network:
      provider: "host"
    storage:
      useAllDevices: true
      config:
        osdsPerDevice: "1"
      storageClassDeviceSets:
        - name: local-nvme
          count: 3
          portable: false
          volumeClaimTemplates:
            - metadata:
                name: nvme
                annotations:
                  crushDeviceClass: nvme
              spec:
                resources:
                  requests:
                    storage: 2000Gi
                # IMPORTANT: Change the storage class depending on your environment
                storageClassName: local-nvme
                volumeMode: Block
                accessModes:
                  - ReadWriteOnce

  cephFileSystems:
    - name: ceph-filesystem
      # see https://github.com/rook/rook/blob/master/Documentation/ceph-filesystem-crd.md#filesystem-settings for available configuration
      spec:
        metadataPool:
          replicated:
            requireSafeReplicaSize: false
            size: 1
        dataPools:
          - failureDomain: host
            replicated:
              requireSafeReplicaSize: false
              size: 1
        metadataServer:
          activeCount: 1
          activeStandby: true
      storageClass:
        enabled: true
        isDefault: false
        name: ceph-filesystem
        reclaimPolicy: Delete
        allowVolumeExpansion: true
        mountOptions: []
        # see https://github.com/rook/rook/blob/master/Documentation/ceph-filesystem.md#provision-storage for available configuration
        parameters:
          # The secrets contain Ceph admin credentials.
          csi.storage.k8s.io/provisioner-secret-name: rook-csi-cephfs-provisioner
          csi.storage.k8s.io/provisioner-secret-namespace: rook-ceph
          csi.storage.k8s.io/controller-expand-secret-name: rook-csi-cephfs-provisioner
          csi.storage.k8s.io/controller-expand-secret-namespace: rook-ceph
          csi.storage.k8s.io/node-stage-secret-name: rook-csi-cephfs-node
          csi.storage.k8s.io/node-stage-secret-namespace: rook-ceph
          # Specify the filesystem type of the volume. If not specified, csi-provisioner
          # will set default as `ext4`. Note that `xfs` is not recommended due to potential deadlock
          # in hyperconverged settings where the volume is mounted on the same node as the osds.
          csi.storage.k8s.io/fstype: ext4
